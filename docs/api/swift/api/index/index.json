{"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/duckdb\/appender\/init(connection:schema:table:)","title":"init(connection: Connection, schema: String?, table: String) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/appender\/append(_:)-1h9y9","title":"func append(Int16?) throws","type":"method"},{"path":"\/documentation\/duckdb\/appender\/append(_:)-1uwbj","title":"func append(IntHuge?) throws","type":"method"},{"path":"\/documentation\/duckdb\/appender\/append(_:)-232ur","title":"func append(Interval?) throws","type":"method"},{"path":"\/documentation\/duckdb\/appender\/append(_:)-2d198","title":"func append(Bool?) throws","type":"method"},{"path":"\/documentation\/duckdb\/appender\/append(_:)-2gsh1","title":"func append(Date?) throws","type":"method"},{"path":"\/documentation\/duckdb\/appender\/append(_:)-3z4lh","title":"func append(String?) throws","type":"method"},{"path":"\/documentation\/duckdb\/appender\/append(_:)-4ib9b","title":"func append(Timestamp?) throws","type":"method"},{"path":"\/documentation\/duckdb\/appender\/append(_:)-573ol","title":"func append(Data?) throws","type":"method"},{"path":"\/documentation\/duckdb\/appender\/append(_:)-5gp7o","title":"func append(UInt32?) throws","type":"method"},{"path":"\/documentation\/duckdb\/appender\/append(_:)-5hxyn","title":"func append(Double?) throws","type":"method"},{"path":"\/documentation\/duckdb\/appender\/append(_:)-5ny7o","title":"func append(Int8?) throws","type":"method"},{"path":"\/documentation\/duckdb\/appender\/append(_:)-60dzz","title":"func append(Int64?) throws","type":"method"},{"path":"\/documentation\/duckdb\/appender\/append(_:)-7q4ip","title":"func append(Time?) throws","type":"method"},{"path":"\/documentation\/duckdb\/appender\/append(_:)-8k2e5","title":"func append(UInt64?) throws","type":"method"},{"path":"\/documentation\/duckdb\/appender\/append(_:)-8rkfg","title":"func append(Float?) throws","type":"method"},{"path":"\/documentation\/duckdb\/appender\/append(_:)-9n8fz","title":"func append(UInt16?) throws","type":"method"},{"path":"\/documentation\/duckdb\/appender\/append(_:)-9pb93","title":"func append(UInt8?) throws","type":"method"},{"path":"\/documentation\/duckdb\/appender\/append(_:)-9un9q","title":"func append(Int32?) throws","type":"method"},{"path":"\/documentation\/duckdb\/appender\/endrow()","title":"func endRow() throws","type":"method"},{"path":"\/documentation\/duckdb\/appender\/flush()","title":"func flush() throws","type":"method"}],"path":"\/documentation\/duckdb\/appender","title":"Appender","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/duckdb\/connection\/init(database:)","title":"init(database: Database) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/connection\/execute(_:)","title":"func execute(String) throws","type":"method"},{"path":"\/documentation\/duckdb\/connection\/query(_:)","title":"func query(String) throws -> ResultSet","type":"method"}],"path":"\/documentation\/duckdb\/connection","title":"Connection","type":"class"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/database\/configuration\/optioninfo\/description","title":"let description: String","type":"property"},{"path":"\/documentation\/duckdb\/database\/configuration\/optioninfo\/name","title":"let name: String","type":"property"}],"path":"\/documentation\/duckdb\/database\/configuration\/optioninfo","title":"Database.Configuration.OptionInfo","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/duckdb\/database\/configuration\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/database\/configuration\/setvalue(_:forkey:)","title":"func setValue(String, forKey: String) throws","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/database\/configuration\/options","title":"static var options: [Database.Configuration.OptionInfo]","type":"property"}],"path":"\/documentation\/duckdb\/database\/configuration","title":"Database.Configuration","type":"class"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/duckdb\/database\/init(store:configuration:)","title":"convenience init(store: Database.Store, configuration: Database.Configuration?) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/database\/connect()","title":"func connect() throws -> Connection","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/duckdb\/database\/store\/file(at:)","title":"case file(at: URL)","type":"case"},{"path":"\/documentation\/duckdb\/database\/store\/inmemory","title":"case inMemory","type":"case"}],"path":"\/documentation\/duckdb\/database\/store","title":"Database.Store","type":"enum"}],"path":"\/documentation\/duckdb\/database","title":"Database","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"path":"\/documentation\/duckdb\/logicaltype\/decimalproperties-swift.struct","title":"LogicalType.DecimalProperties","type":"struct"},{"path":"\/documentation\/duckdb\/logicaltype\/structmemberproperties-swift.struct","title":"LogicalType.StructMemberProperties","type":"struct"},{"path":"\/documentation\/duckdb\/logicaltype\/unionmemberproperties-swift.struct","title":"LogicalType.UnionMemberProperties","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/logicaltype\/datatype","title":"var dataType: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/logicaltype\/decimalproperties-swift.property","title":"var decimalProperties: LogicalType.DecimalProperties?","type":"property"},{"path":"\/documentation\/duckdb\/logicaltype\/listchildtype","title":"var listChildType: LogicalType?","type":"property"},{"path":"\/documentation\/duckdb\/logicaltype\/mapkeytype","title":"var mapKeyType: LogicalType?","type":"property"},{"path":"\/documentation\/duckdb\/logicaltype\/mapvaluetype","title":"var mapValueType: LogicalType?","type":"property"},{"path":"\/documentation\/duckdb\/logicaltype\/structmemberproperties-swift.property","title":"var structMemberProperties: [LogicalType.StructMemberProperties]?","type":"property"},{"path":"\/documentation\/duckdb\/logicaltype\/underlyingdatatype","title":"var underlyingDataType: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/logicaltype\/unionmemberproperties-swift.property","title":"var unionMemberProperties: [LogicalType.UnionMemberProperties]?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/logicaltype\/structcompatibletypes","title":"static let structCompatibleTypes: [DatabaseType]","type":"property"}],"path":"\/documentation\/duckdb\/logicaltype","title":"LogicalType","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/duckdb\/preparedstatement\/init(connection:query:)","title":"init(connection: Connection, query: String) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/preparedstatement\/parametercount","title":"var parameterCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/preparedstatement\/bind(_:at:)-16pm","title":"func bind(Int8?, at: Int) throws","type":"method"},{"path":"\/documentation\/duckdb\/preparedstatement\/bind(_:at:)-1cu6t","title":"func bind(UInt8?, at: Int) throws","type":"method"},{"path":"\/documentation\/duckdb\/preparedstatement\/bind(_:at:)-1jm4x","title":"func bind(Data?, at: Int) throws","type":"method"},{"path":"\/documentation\/duckdb\/preparedstatement\/bind(_:at:)-2cxmr","title":"func bind(Interval?, at: Int) throws","type":"method"},{"path":"\/documentation\/duckdb\/preparedstatement\/bind(_:at:)-31rx7","title":"func bind(Int16?, at: Int) throws","type":"method"},{"path":"\/documentation\/duckdb\/preparedstatement\/bind(_:at:)-3chx4","title":"func bind(Int64?, at: Int) throws","type":"method"},{"path":"\/documentation\/duckdb\/preparedstatement\/bind(_:at:)-3ier1","title":"func bind(Date?, at: Int) throws","type":"method"},{"path":"\/documentation\/duckdb\/preparedstatement\/bind(_:at:)-49lu3","title":"func bind(Double?, at: Int) throws","type":"method"},{"path":"\/documentation\/duckdb\/preparedstatement\/bind(_:at:)-4e7be","title":"func bind(String?, at: Int) throws","type":"method"},{"path":"\/documentation\/duckdb\/preparedstatement\/bind(_:at:)-5nu5m","title":"func bind(Bool?, at: Int) throws","type":"method"},{"path":"\/documentation\/duckdb\/preparedstatement\/bind(_:at:)-5ovj9","title":"func bind(UInt64?, at: Int) throws","type":"method"},{"path":"\/documentation\/duckdb\/preparedstatement\/bind(_:at:)-6epvi","title":"func bind(UInt32?, at: Int) throws","type":"method"},{"path":"\/documentation\/duckdb\/preparedstatement\/bind(_:at:)-6kydt","title":"func bind(Timestamp?, at: Int) throws","type":"method"},{"path":"\/documentation\/duckdb\/preparedstatement\/bind(_:at:)-7lpel","title":"func bind(Float?, at: Int) throws","type":"method"},{"path":"\/documentation\/duckdb\/preparedstatement\/bind(_:at:)-7rt1s","title":"func bind(IntHuge?, at: Int) throws","type":"method"},{"path":"\/documentation\/duckdb\/preparedstatement\/bind(_:at:)-8uh4q","title":"func bind(Int32?, at: Int) throws","type":"method"},{"path":"\/documentation\/duckdb\/preparedstatement\/bind(_:at:)-9igo6","title":"func bind(Decimal?, at: Int) throws","type":"method"},{"path":"\/documentation\/duckdb\/preparedstatement\/bind(_:at:)-a5et","title":"func bind(Time?, at: Int) throws","type":"method"},{"path":"\/documentation\/duckdb\/preparedstatement\/bind(_:at:)-ll6p","title":"func bind(UInt16?, at: Int) throws","type":"method"},{"path":"\/documentation\/duckdb\/preparedstatement\/execute()","title":"func execute() throws -> ResultSet","type":"method"}],"path":"\/documentation\/duckdb\/preparedstatement","title":"PreparedStatement","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/resultset\/chunkcount","title":"var chunkCount: DBInt","type":"property"},{"path":"\/documentation\/duckdb\/resultset\/columncount","title":"var columnCount: DBInt","type":"property"},{"path":"\/documentation\/duckdb\/resultset\/rowcount","title":"var rowCount: DBInt","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/resultset\/column(at:)","title":"func column(at: DBInt) -> Column<Void>","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/columnname(at:)","title":"func columnName(at: DBInt) -> String","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/index(forcolumnname:)","title":"func index(forColumnName: String) -> DBInt?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/resultset\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/resultset\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/duckdb\/resultset\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/resultset\/iterator\/next()","title":"func next() -> ResultSet.Element?","type":"method"}],"path":"\/documentation\/duckdb\/resultset\/iterator","title":"ResultSet.Iterator","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/resultset\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/duckdb\/resultset\/endindex","title":"var endIndex: DBInt","type":"property"},{"path":"\/documentation\/duckdb\/resultset\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/duckdb\/resultset\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/duckdb\/resultset\/startindex","title":"var startIndex: DBInt","type":"property"},{"path":"\/documentation\/duckdb\/resultset\/underestimatedcount-439uf","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/resultset\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/makeiterator()","title":"func makeIterator() -> ResultSet.Iterator","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/map(_:)-3a5l5","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/duckdb\/resultset\/subscript(_:)-11wjf","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/duckdb\/resultset\/subscript(_:)-40auf","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/duckdb\/resultset\/subscript(_:)-63gb9","title":"subscript(DBInt) -> Column<Void>","type":"subscript"},{"path":"\/documentation\/duckdb\/resultset\/subscript(_:)-7c6bp","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"}],"path":"\/documentation\/duckdb\/resultset\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/resultset\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/duckdb\/resultset\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/resultset\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/index(after:)","title":"func index(after: DBInt) -> DBInt","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/index(before:)","title":"func index(before: DBInt) -> DBInt","type":"method"}],"path":"\/documentation\/duckdb\/resultset\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/resultset\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/duckdb\/resultset\/underestimatedcount-8qvsn","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/resultset\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/flatmap(_:)-7q88z","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/flatmap(_:)-7spcm","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/joined(separator:)","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/map(_:)-7619x","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/resultset\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/duckdb\/resultset\/element","title":"ResultSet.Element","type":"typealias"}],"path":"\/documentation\/duckdb\/resultset\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/duckdb\/resultset","title":"ResultSet","type":"class"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/column\/datatype","title":"var dataType: DataType.Type","type":"property"},{"path":"\/documentation\/duckdb\/column\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/duckdb\/column\/underlyingdatabasetype","title":"var underlyingDatabaseType: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/column\/underlyinglogicaltype","title":"var underlyingLogicalType: LogicalType","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/column\/cast(to:)-1z65y","title":"func cast(to: Data.Type) -> Column<Data>","type":"method"},{"path":"\/documentation\/duckdb\/column\/cast(to:)-255wv","title":"func cast(to: String.Type) -> Column<String>","type":"method"},{"path":"\/documentation\/duckdb\/column\/cast(to:)-2aess","title":"func cast(to: UInt16.Type) -> Column<UInt16>","type":"method"},{"path":"\/documentation\/duckdb\/column\/cast(to:)-3106","title":"func cast(to: UInt64.Type) -> Column<UInt64>","type":"method"},{"path":"\/documentation\/duckdb\/column\/cast(to:)-3djl","title":"func cast(to: Bool.Type) -> Column<Bool>","type":"method"},{"path":"\/documentation\/duckdb\/column\/cast(to:)-3vom","title":"func cast(to: UInt32.Type) -> Column<UInt32>","type":"method"},{"path":"\/documentation\/duckdb\/column\/cast(to:)-4376d","title":"func cast<T>(to: T.Type) -> Column<T>","type":"method"},{"path":"\/documentation\/duckdb\/column\/cast(to:)-49y46","title":"func cast(to: Int8.Type) -> Column<Int8>","type":"method"},{"path":"\/documentation\/duckdb\/column\/cast(to:)-4cize","title":"func cast(to: Int32.Type) -> Column<Int32>","type":"method"},{"path":"\/documentation\/duckdb\/column\/cast(to:)-5fzwv","title":"func cast(to: Timestamp.Type) -> Column<Timestamp>","type":"method"},{"path":"\/documentation\/duckdb\/column\/cast(to:)-5jmwq","title":"func cast(to: IntHuge.Type) -> Column<IntHuge>","type":"method"},{"path":"\/documentation\/duckdb\/column\/cast(to:)-5mpq","title":"func cast(to: Int64.Type) -> Column<Int64>","type":"method"},{"path":"\/documentation\/duckdb\/column\/cast(to:)-5nneo","title":"func cast(to: Int.Type) -> Column<Int>","type":"method"},{"path":"\/documentation\/duckdb\/column\/cast(to:)-6mjv2","title":"func cast(to: Decimal.Type) -> Column<Decimal>","type":"method"},{"path":"\/documentation\/duckdb\/column\/cast(to:)-6ueo0","title":"func cast(to: UInt.Type) -> Column<UInt>","type":"method"},{"path":"\/documentation\/duckdb\/column\/cast(to:)-70tmo","title":"func cast(to: UInt8.Type) -> Column<UInt8>","type":"method"},{"path":"\/documentation\/duckdb\/column\/cast(to:)-7f4ac","title":"func cast(to: Interval.Type) -> Column<Interval>","type":"method"},{"path":"\/documentation\/duckdb\/column\/cast(to:)-7mly0","title":"func cast(to: Int16.Type) -> Column<Int16>","type":"method"},{"path":"\/documentation\/duckdb\/column\/cast(to:)-7wlsz","title":"func cast(to: Double.Type) -> Column<Double>","type":"method"},{"path":"\/documentation\/duckdb\/column\/cast(to:)-8i5x8","title":"func cast(to: Time.Type) -> Column<Time>","type":"method"},{"path":"\/documentation\/duckdb\/column\/cast(to:)-9h4v","title":"func cast(to: Void.Type) -> Column<Void>","type":"method"},{"path":"\/documentation\/duckdb\/column\/cast(to:)-cr8w","title":"func cast(to: Float.Type) -> Column<Float>","type":"method"},{"path":"\/documentation\/duckdb\/column\/cast(to:)-m88j","title":"func cast(to: UUID.Type) -> Column<UUID>","type":"method"},{"path":"\/documentation\/duckdb\/column\/cast(to:)-zha8","title":"func cast(to: Date.Type) -> Column<Date>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/column\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/column\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/duckdb\/column\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/duckdb\/column\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/column\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/duckdb\/column\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/column\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/duckdb\/column\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/duckdb\/column\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/duckdb\/column\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/duckdb\/column\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/column\/iterator\/next()","title":"func next() -> Column<DataType>.Element?","type":"method"}],"path":"\/documentation\/duckdb\/column\/iterator","title":"Column.Iterator","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/column\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/duckdb\/column\/endindex","title":"var endIndex: DBInt","type":"property"},{"path":"\/documentation\/duckdb\/column\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/duckdb\/column\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/duckdb\/column\/startindex","title":"var startIndex: DBInt","type":"property"},{"path":"\/documentation\/duckdb\/column\/underestimatedcount-y1y0","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/column\/contains(_:)-5pe6e","title":"func contains<C>(C) -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/column\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/column\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/column\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/duckdb\/column\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/duckdb\/column\/firstrange(of:)","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/duckdb\/column\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/duckdb\/column\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/column\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/duckdb\/column\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/duckdb\/column\/makeiterator()","title":"func makeIterator() -> Column<DataType>.Iterator","type":"method"},{"path":"\/documentation\/duckdb\/column\/map(_:)-2vufc","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/duckdb\/column\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/column\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/column\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/column\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/column\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/column\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/column\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/duckdb\/column\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/duckdb\/column\/split(separator:maxsplits:omittingemptysubsequences:)-38urv","title":"func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/duckdb\/column\/split(separator:maxsplits:omittingemptysubsequences:)-4oxr3","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/duckdb\/column\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/column\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/column\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/duckdb\/column\/subscript(_:)-18zds","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/duckdb\/column\/subscript(_:)-8ue90","title":"subscript(DBInt) -> DataType?","type":"subscript"},{"path":"\/documentation\/duckdb\/column\/subscript(_:)-9wtgj","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/duckdb\/column\/subscript(_:)-nmr7","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"}],"path":"\/documentation\/duckdb\/column\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/column\/id-3iced","title":"var id: ObjectIdentifier","type":"property"},{"path":"\/documentation\/duckdb\/column\/id-8pn07","title":"var id: String","type":"property"}],"path":"\/documentation\/duckdb\/column\/identifiable-implementations","title":"Identifiable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/column\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/duckdb\/column\/index(after:)","title":"func index(after: DBInt) -> DBInt","type":"method"},{"path":"\/documentation\/duckdb\/column\/index(before:)","title":"func index(before: DBInt) -> DBInt","type":"method"}],"path":"\/documentation\/duckdb\/column\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/column\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/duckdb\/column\/underestimatedcount-1v2xo","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/column\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/column\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/duckdb\/column\/contains(_:)-8o39f","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/column\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/column\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/column\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/column\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/duckdb\/column\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/duckdb\/column\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/column\/flatmap(_:)-1njvn","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/duckdb\/column\/flatmap(_:)-9dc2s","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/duckdb\/column\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/duckdb\/column\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/column\/map(_:)-zdbc","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/duckdb\/column\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/column\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/column\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/duckdb\/column\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/duckdb\/column\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/duckdb\/column\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/duckdb\/column\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/duckdb\/column\/split(separator:maxsplits:omittingemptysubsequences:)-6cjkj","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/duckdb\/column\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/column\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/column\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/duckdb\/column\/element","title":"Column.Element","type":"typealias"}],"path":"\/documentation\/duckdb\/column\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/duckdb\/column","title":"Column","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/duckdb\/databasetype\/init(rawvalue:)","title":"init(rawValue: UInt32)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/databasetype\/rawvalue","title":"let rawValue: UInt32","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/databasetype\/bigint","title":"static let bigint: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/databasetype\/blob","title":"static let blob: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/databasetype\/boolean","title":"static let boolean: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/databasetype\/date","title":"static let date: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/databasetype\/decimal","title":"static let decimal: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/databasetype\/double","title":"static let double: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/databasetype\/enum","title":"static let `enum`: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/databasetype\/float","title":"static let float: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/databasetype\/hugeint","title":"static let hugeint: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/databasetype\/integer","title":"static let integer: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/databasetype\/interval","title":"static let interval: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/databasetype\/list","title":"static let list: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/databasetype\/map","title":"static let map: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/databasetype\/smallint","title":"static let smallint: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/databasetype\/struct","title":"static let `struct`: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/databasetype\/time","title":"static let time: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/databasetype\/timestamp","title":"static let timestamp: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/databasetype\/timestampms","title":"static let timestampMS: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/databasetype\/timestampns","title":"static let timestampNS: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/databasetype\/timestamps","title":"static let timestampS: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/databasetype\/tinyint","title":"static let tinyint: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/databasetype\/ubigint","title":"static let ubigint: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/databasetype\/uinteger","title":"static let uinteger: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/databasetype\/union","title":"static let union: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/databasetype\/usmallint","title":"static let usmallint: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/databasetype\/utinyint","title":"static let utinyint: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/databasetype\/uuid","title":"static let uuid: DatabaseType","type":"property"},{"path":"\/documentation\/duckdb\/databasetype\/varchar","title":"static let varchar: DatabaseType","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/databasetype\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/duckdb\/databasetype\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/duckdb\/databasetype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/duckdb\/databasetype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/databasetype\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/databasetype\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/duckdb\/databasetype\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/duckdb\/databasetype","title":"DatabaseType","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/date\/components-swift.struct\/day","title":"var day: Int8","type":"property"},{"path":"\/documentation\/duckdb\/date\/components-swift.struct\/month","title":"var month: Int8","type":"property"},{"path":"\/documentation\/duckdb\/date\/components-swift.struct\/year","title":"var year: Int32","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/duckdb\/date\/components-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/duckdb\/date\/components-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/duckdb\/date\/components-swift.struct","title":"Date.Components","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/duckdb\/date\/init(components:)","title":"init(components: Date.Components)","type":"init"},{"path":"\/documentation\/duckdb\/date\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/date\/components-swift.property","title":"var components: Date.Components","type":"property"},{"path":"\/documentation\/duckdb\/date\/days","title":"var days: Int32","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/duckdb\/date\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/duckdb\/date\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/duckdb\/date","title":"Date","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/__=(_:_:)-2d429","title":"static func <<= (inout IntHuge, IntHuge)","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/__=(_:_:)-9gzjh","title":"static func >>= (inout IntHuge, IntHuge)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/init()-v1ep","title":"init()","type":"init"},{"path":"\/documentation\/duckdb\/inthuge\/init(_:)-3xjg7","title":"init(IntHuge.Magnitude)","type":"init"},{"path":"\/documentation\/duckdb\/inthuge\/init(_:)-9p2t1","title":"init((high: IntHuge.High, low: IntHuge.Low))","type":"init"},{"path":"\/documentation\/duckdb\/inthuge\/init(bitpattern:)","title":"init(bitPattern: UIntHuge)","type":"init"},{"path":"\/documentation\/duckdb\/inthuge\/init(high:low:)","title":"init(high: IntHuge.High, low: IntHuge.Low)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/components","title":"var components: (high: IntHuge.High, low: IntHuge.Low)","type":"property"},{"path":"\/documentation\/duckdb\/inthuge\/high-swift.property","title":"var high: IntHuge.High","type":"property"},{"path":"\/documentation\/duckdb\/inthuge\/low-swift.property","title":"var low: IntHuge.Low","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/multiplied(by:)","title":"func multiplied(by: UInt64) -> IntHuge","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/multipliedreportingoverflow(by:)-2ag7m","title":"func multipliedReportingOverflow(by: UInt64) -> (partialValue: IntHuge, overflow: Bool)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/high-swift.typealias","title":"IntHuge.High","type":"typealias"},{"path":"\/documentation\/duckdb\/inthuge\/low-swift.typealias","title":"IntHuge.Low","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/one","title":"static var one: IntHuge","type":"property"},{"path":"\/documentation\/duckdb\/inthuge\/zero-8ybrr","title":"static var zero: IntHuge","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/+(_:)","title":"static func + (Self) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/+(_:_:)","title":"static func + (IntHuge, IntHuge) -> IntHuge","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/+=(_:_:)-33u28","title":"static func += (inout Self, Self)","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/+=(_:_:)-7stah","title":"static func += (inout IntHuge, IntHuge)","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/-(_:_:)","title":"static func - (IntHuge, IntHuge) -> IntHuge","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/-=(_:_:)-1l8gc","title":"static func -= (inout Self, Self)","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/-=(_:_:)-8ak6w","title":"static func -= (inout IntHuge, IntHuge)","type":"op"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/zero-5zi15","title":"static var zero: Self","type":"property"}],"path":"\/documentation\/duckdb\/inthuge\/additivearithmetic-implementations","title":"AdditiveArithmetic Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/firstrange(of:)-2smb","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/count-4eobd","title":"var count: Int","type":"property"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/count-7gwj","title":"var count: Int","type":"property"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/startindex","title":"var startIndex: Int","type":"property"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/underestimatedcount-58ms8","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/firstrange(of:)-4nrkc","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/map(_:)-8p11r","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/subscript(_:)-1ks6z","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/subscript(_:)-37p1n","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/subscript(_:)-3mixd","title":"subscript(Int) -> UInt","type":"subscript"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/subscript(_:)-6yxle","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/index","title":"IntHuge.Words.Index","type":"typealias"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/indices-swift.typealias","title":"IntHuge.Words.Indices","type":"typealias"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/subsequence","title":"IntHuge.Words.SubSequence","type":"typealias"}],"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/indices-swift.property","title":"var indices: IntHuge.Words.Indices","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/index(after:)","title":"func index(after: Int) -> Int","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/index(before:)","title":"func index(before: Int) -> Int","type":"method"}],"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/underestimatedcount-1mwg4","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/flatmap(_:)-4rwee","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/flatmap(_:)-841tf","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/map(_:)-8y2rr","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/element","title":"IntHuge.Words.Element","type":"typealias"}],"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/duckdb\/inthuge\/words-swift.struct","title":"IntHuge.Words","type":"struct"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/!=(_:_:)-7chz4","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/!=(_:_:)-80ihp","title":"static func != <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/&(_:_:)","title":"static func & (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/&=(_:_:)","title":"static func &= (inout IntHuge, IntHuge)","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/\/(_:_:)","title":"static func \/ (IntHuge, IntHuge) -> IntHuge","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/\/=(_:_:)","title":"static func \/= (inout IntHuge, IntHuge)","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/==(_:_:)-6a9h4","title":"static func == <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/_(_:_:)-29qr7","title":"static func > <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/_(_:_:)-4aai","title":"static func < <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/_(_:_:)-4rfwh","title":"static func ^ (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/_(_:_:)-652s3","title":"static func | (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/_(_:_:)-9c48o","title":"static func % (IntHuge, IntHuge) -> IntHuge","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/_=(_:_:)-1015w","title":"static func >= <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/_=(_:_:)-4wgqw","title":"static func ^= (inout IntHuge, IntHuge)","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/_=(_:_:)-54tlt","title":"static func <= <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/_=(_:_:)-55cij","title":"static func %= (inout IntHuge, IntHuge)","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/_=(_:_:)-58d7m","title":"static func |= (inout IntHuge, IntHuge)","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/__(_:_:)-1tdrz","title":"static func >> <RHS>(Self, RHS) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/__(_:_:)-2cs9r","title":"static func << <RHS>(Self, RHS) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/__=(_:_:)-4atlt","title":"static func <<= <Other>(inout Self, Other)","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/__=(_:_:)-6ymgd","title":"static func >>= <Other>(inout Self, Other)","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/~(_:)-8yvsn","title":"static func ~ (IntHuge) -> IntHuge","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/init()-6ydmv","title":"init()","type":"init"},{"path":"\/documentation\/duckdb\/inthuge\/init(_:)-1xzxt","title":"init<T>(T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/description-7b8o6","title":"var description: String","type":"property"},{"path":"\/documentation\/duckdb\/inthuge\/trailingzerobitcount","title":"var trailingZeroBitCount: Int","type":"property"},{"path":"\/documentation\/duckdb\/inthuge\/words-swift.property","title":"var words: IntHuge.Words","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/advanced(by:)","title":"func advanced(by: Int) -> Self","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/distance(to:)","title":"func distance(to: Self) -> Int","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/ismultiple(of:)","title":"func isMultiple(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/quotientandremainder(dividingby:)","title":"func quotientAndRemainder(dividingBy: IntHuge) -> (quotient: IntHuge, remainder: IntHuge)","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/signum()","title":"func signum() -> Self","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/issigned-8ttni","title":"static var isSigned: Bool","type":"property"}],"path":"\/documentation\/duckdb\/inthuge\/binaryinteger-implementations","title":"BinaryInteger Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/'...(_:)-3ykj6","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/'...(_:)-vv4e","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/_(_:_:)-23b15","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/_(_:_:)-56g24","title":"static func < (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/_(_:_:)-5rcqw","title":"static func < (IntHuge, IntHuge) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/_(_:_:)-8gzb5","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/_=(_:_:)-2ro8x","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/_=(_:_:)-3ke41","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/_=(_:_:)-78p0w","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/_=(_:_:)-8rn5o","title":"static func <= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/duckdb\/inthuge\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/duckdb\/inthuge\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/description-8ajw2","title":"var description: String","type":"property"}],"path":"\/documentation\/duckdb\/inthuge\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/!=(_:_:)-4uo53","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/==(_:_:)-7fogt","title":"static func == (IntHuge, IntHuge) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/==(_:_:)-9qj1h","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/duckdb\/inthuge\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/init(integerliteral:)","title":"init(integerLiteral: Int64)","type":"init"}],"path":"\/documentation\/duckdb\/inthuge\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/&*(_:_:)","title":"static func &* (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/&*=(_:_:)","title":"static func &*= (inout Self, Self)","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/&+(_:_:)","title":"static func &+ (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/&+=(_:_:)","title":"static func &+= (inout Self, Self)","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/&-(_:_:)","title":"static func &- (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/&-=(_:_:)","title":"static func &-= (inout Self, Self)","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/&__(_:_:)-2a2z7","title":"static func &>> <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/&__(_:_:)-5j3en","title":"static func &<< <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/&__(_:_:)-6hvh7","title":"static func &>> (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/&__(_:_:)-8emxs","title":"static func &>> (IntHuge, IntHuge) -> IntHuge","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/&__(_:_:)-9sgs","title":"static func &<< (IntHuge, IntHuge) -> IntHuge","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/&__(_:_:)-9z7zx","title":"static func &<< (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/&__=(_:_:)-5y91z","title":"static func &<<= (inout IntHuge, IntHuge)","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/&__=(_:_:)-8s3h3","title":"static func &>>= (inout IntHuge, IntHuge)","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/&__=(_:_:)-9j9p3","title":"static func &>>= <Other>(inout Self, Other)","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/&__=(_:_:)-9xujt","title":"static func &<<= <Other>(inout Self, Other)","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/__(_:_:)-3q927","title":"static func << <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/__(_:_:)-8upbn","title":"static func >> <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/~(_:)-6m8g4","title":"static func ~ (Self) -> Self","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/init(_:)-4dtwn","title":"init<T>(T)","type":"init"},{"path":"\/documentation\/duckdb\/inthuge\/init(_:)-9hmwg","title":"init?(String)","type":"init"},{"path":"\/documentation\/duckdb\/inthuge\/init(_:radix:)","title":"init?<S>(S, radix: Int)","type":"init"},{"path":"\/documentation\/duckdb\/inthuge\/init(bigendian:)","title":"init(bigEndian: Self)","type":"init"},{"path":"\/documentation\/duckdb\/inthuge\/init(clamping:)","title":"init<Other>(clamping: Other)","type":"init"},{"path":"\/documentation\/duckdb\/inthuge\/init(exactly:)-9hi4y","title":"init?<T>(exactly: T)","type":"init"},{"path":"\/documentation\/duckdb\/inthuge\/init(littleendian:)","title":"init(littleEndian: Self)","type":"init"},{"path":"\/documentation\/duckdb\/inthuge\/init(truncatingifneeded:)","title":"init<T>(truncatingIfNeeded: T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/bigendian","title":"var bigEndian: Self","type":"property"},{"path":"\/documentation\/duckdb\/inthuge\/bitwidth-swift.property","title":"var bitWidth: Int","type":"property"},{"path":"\/documentation\/duckdb\/inthuge\/byteswapped","title":"var byteSwapped: IntHuge","type":"property"},{"path":"\/documentation\/duckdb\/inthuge\/leadingzerobitcount","title":"var leadingZeroBitCount: Int","type":"property"},{"path":"\/documentation\/duckdb\/inthuge\/littleendian","title":"var littleEndian: Self","type":"property"},{"path":"\/documentation\/duckdb\/inthuge\/nonzerobitcount","title":"var nonzeroBitCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/addingreportingoverflow(_:)","title":"func addingReportingOverflow(IntHuge) -> (partialValue: IntHuge, overflow: Bool)","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/dividedreportingoverflow(by:)","title":"func dividedReportingOverflow(by: IntHuge) -> (partialValue: IntHuge, overflow: Bool)","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/dividingfullwidth(_:)","title":"func dividingFullWidth((high: IntHuge, low: IntHuge.Magnitude)) -> (quotient: IntHuge, remainder: IntHuge)","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/multipliedfullwidth(by:)","title":"func multipliedFullWidth(by: IntHuge) -> (high: IntHuge, low: IntHuge.Magnitude)","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/multipliedreportingoverflow(by:)-32vko","title":"func multipliedReportingOverflow(by: IntHuge) -> (partialValue: IntHuge, overflow: Bool)","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/remainderreportingoverflow(dividingby:)","title":"func remainderReportingOverflow(dividingBy: IntHuge) -> (partialValue: IntHuge, overflow: Bool)","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/subtractingreportingoverflow(_:)","title":"func subtractingReportingOverflow(IntHuge) -> (partialValue: IntHuge, overflow: Bool)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/bitwidth-swift.type.property","title":"static var bitWidth: Int","type":"property"},{"path":"\/documentation\/duckdb\/inthuge\/max-57vv7","title":"static var max: IntHuge","type":"property"},{"path":"\/documentation\/duckdb\/inthuge\/min-cuhc","title":"static var min: IntHuge","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/random(in:)-42czb","title":"static func random(in: ClosedRange<Self>) -> Self","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/random(in:)-7hlrr","title":"static func random(in: Range<Self>) -> Self","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/random(in:using:)-5dftn","title":"static func random<T>(in: Range<Self>, using: inout T) -> Self","type":"method"},{"path":"\/documentation\/duckdb\/inthuge\/random(in:using:)-z5k3","title":"static func random<T>(in: ClosedRange<Self>, using: inout T) -> Self","type":"method"}],"path":"\/documentation\/duckdb\/inthuge\/fixedwidthinteger-implementations","title":"FixedWidthInteger Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/duckdb\/inthuge\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/*(_:_:)","title":"static func * (IntHuge, IntHuge) -> IntHuge","type":"op"},{"path":"\/documentation\/duckdb\/inthuge\/*=(_:_:)","title":"static func *= (inout IntHuge, IntHuge)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/init(exactly:)-16x2b","title":"init?<T>(exactly: T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/magnitude-swift.property","title":"var magnitude: IntHuge.Magnitude","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/magnitude-swift.typealias","title":"IntHuge.Magnitude","type":"typealias"}],"path":"\/documentation\/duckdb\/inthuge\/numeric-implementations","title":"Numeric Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/init(_:)-654hv","title":"init<T>(T)","type":"init"},{"path":"\/documentation\/duckdb\/inthuge\/init(exactly:)-7ssv","title":"init?<T>(exactly: T)","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/issigned-7fw9z","title":"static var isSigned: Bool","type":"property"},{"path":"\/documentation\/duckdb\/inthuge\/max-53v1t","title":"static var max: Self","type":"property"},{"path":"\/documentation\/duckdb\/inthuge\/min-8yt58","title":"static var min: Self","type":"property"}],"path":"\/documentation\/duckdb\/inthuge\/signedinteger-implementations","title":"SignedInteger Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/-(_:)","title":"static func - (Self) -> Self","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/inthuge\/negate()","title":"func negate()","type":"method"}],"path":"\/documentation\/duckdb\/inthuge\/signednumeric-implementations","title":"SignedNumeric Implementations","type":"symbol"}],"path":"\/documentation\/duckdb\/inthuge","title":"IntHuge","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/interval\/days","title":"var days: Int32","type":"property"},{"path":"\/documentation\/duckdb\/interval\/microseconds","title":"var microseconds: Int64","type":"property"},{"path":"\/documentation\/duckdb\/interval\/months","title":"var months: Int32","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/duckdb\/interval\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/duckdb\/interval\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/duckdb\/interval","title":"Interval","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/time\/components-swift.struct\/hour","title":"var hour: Int8","type":"property"},{"path":"\/documentation\/duckdb\/time\/components-swift.struct\/microsecond","title":"var microsecond: Int32","type":"property"},{"path":"\/documentation\/duckdb\/time\/components-swift.struct\/minute","title":"var minute: Int8","type":"property"},{"path":"\/documentation\/duckdb\/time\/components-swift.struct\/second","title":"var second: Int8","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/duckdb\/time\/components-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/duckdb\/time\/components-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/duckdb\/time\/components-swift.struct","title":"Time.Components","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/duckdb\/time\/init(_:)","title":"init(Date)","type":"init"},{"path":"\/documentation\/duckdb\/time\/init(components:)","title":"init(components: Time.Components)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/time\/components-swift.property","title":"var components: Time.Components","type":"property"},{"path":"\/documentation\/duckdb\/time\/microseconds","title":"var microseconds: Int64","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/duckdb\/time\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/duckdb\/time\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/duckdb\/time","title":"Time","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/timestamp\/components-swift.struct\/date","title":"var date: Date.Components","type":"property"},{"path":"\/documentation\/duckdb\/timestamp\/components-swift.struct\/time","title":"var time: Time.Components","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/duckdb\/timestamp\/components-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/duckdb\/timestamp\/components-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/duckdb\/timestamp\/components-swift.struct","title":"Timestamp.Components","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/duckdb\/timestamp\/init(_:)","title":"init(Date)","type":"init"},{"path":"\/documentation\/duckdb\/timestamp\/init(components:)","title":"init(components: Timestamp.Components)","type":"init"},{"path":"\/documentation\/duckdb\/timestamp\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/timestamp\/components-swift.property","title":"var components: Timestamp.Components","type":"property"},{"path":"\/documentation\/duckdb\/timestamp\/microseconds","title":"var microseconds: Int64","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/duckdb\/timestamp\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/duckdb\/timestamp\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/duckdb\/timestamp","title":"Timestamp","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/__=(_:_:)-2tsf1","title":"static func >>= (inout UIntHuge, UIntHuge)","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/__=(_:_:)-9k7sj","title":"static func <<= (inout UIntHuge, UIntHuge)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/init()-1vwwt","title":"init()","type":"init"},{"path":"\/documentation\/duckdb\/uinthuge\/init(_:)-1m2ct","title":"init((high: UIntHuge.High, low: UIntHuge.Low))","type":"init"},{"path":"\/documentation\/duckdb\/uinthuge\/init(_:)-9twef","title":"init(UIntHuge.Magnitude)","type":"init"},{"path":"\/documentation\/duckdb\/uinthuge\/init(bitpattern:)","title":"init(bitPattern: IntHuge)","type":"init"},{"path":"\/documentation\/duckdb\/uinthuge\/init(high:low:)","title":"init(high: UIntHuge.High, low: UIntHuge.Low)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/components","title":"var components: (high: UIntHuge.High, low: UIntHuge.Low)","type":"property"},{"path":"\/documentation\/duckdb\/uinthuge\/high-swift.property","title":"var high: UIntHuge.High","type":"property"},{"path":"\/documentation\/duckdb\/uinthuge\/low-swift.property","title":"var low: UIntHuge.Low","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/multiplied(by:)","title":"func multiplied(by: UInt64) -> UIntHuge","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/multipliedreportingoverflow(by:)-4qmyp","title":"func multipliedReportingOverflow(by: UInt64) -> (partialValue: UIntHuge, overflow: Bool)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/high-swift.typealias","title":"UIntHuge.High","type":"typealias"},{"path":"\/documentation\/duckdb\/uinthuge\/low-swift.typealias","title":"UIntHuge.Low","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/one","title":"static var one: UIntHuge","type":"property"},{"path":"\/documentation\/duckdb\/uinthuge\/zero-7b0q8","title":"static var zero: UIntHuge","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/+(_:)","title":"static func + (Self) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/+(_:_:)","title":"static func + (UIntHuge, UIntHuge) -> UIntHuge","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/+=(_:_:)-20ad8","title":"static func += (inout UIntHuge, UIntHuge)","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/+=(_:_:)-43dxm","title":"static func += (inout Self, Self)","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/-(_:_:)","title":"static func - (UIntHuge, UIntHuge) -> UIntHuge","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/-=(_:_:)-38vcw","title":"static func -= (inout UIntHuge, UIntHuge)","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/-=(_:_:)-8zjub","title":"static func -= (inout Self, Self)","type":"op"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/zero-56f72","title":"static var zero: Self","type":"property"}],"path":"\/documentation\/duckdb\/uinthuge\/additivearithmetic-implementations","title":"AdditiveArithmetic Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/firstrange(of:)-9w4nu","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/count-3l38h","title":"var count: Int","type":"property"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/count-7zkly","title":"var count: Int","type":"property"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/startindex","title":"var startIndex: Int","type":"property"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/underestimatedcount-5wc7","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/firstrange(of:)-7fsh0","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/map(_:)-49jp9","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/subscript(_:)-5x9h0","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/subscript(_:)-8prol","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/subscript(_:)-9c322","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/subscript(_:)-y7pm","title":"subscript(Int) -> UInt","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/index","title":"UIntHuge.Words.Index","type":"typealias"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/indices-swift.typealias","title":"UIntHuge.Words.Indices","type":"typealias"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/subsequence","title":"UIntHuge.Words.SubSequence","type":"typealias"}],"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/indices-swift.property","title":"var indices: UIntHuge.Words.Indices","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/index(after:)","title":"func index(after: Int) -> Int","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/index(before:)","title":"func index(before: Int) -> Int","type":"method"}],"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/underestimatedcount-ymhx","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/flatmap(_:)-1pdvv","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/flatmap(_:)-46u4e","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/map(_:)-ocgk","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/element","title":"UIntHuge.Words.Element","type":"typealias"}],"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/duckdb\/uinthuge\/words-swift.struct","title":"UIntHuge.Words","type":"struct"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/!=(_:_:)-21tzk","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/!=(_:_:)-3hlr7","title":"static func != <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/&(_:_:)","title":"static func & (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/&=(_:_:)","title":"static func &= (inout UIntHuge, UIntHuge)","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/\/(_:_:)","title":"static func \/ (UIntHuge, UIntHuge) -> UIntHuge","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/\/=(_:_:)","title":"static func \/= (inout UIntHuge, UIntHuge)","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/==(_:_:)-5fkz0","title":"static func == <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/_(_:_:)-18cjw","title":"static func % (UIntHuge, UIntHuge) -> UIntHuge","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/_(_:_:)-4bpey","title":"static func ^ (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/_(_:_:)-5a48b","title":"static func < <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/_(_:_:)-5fmx8","title":"static func > <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/_(_:_:)-5oah9","title":"static func | (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/_=(_:_:)-1wlh3","title":"static func |= (inout UIntHuge, UIntHuge)","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/_=(_:_:)-3wwbn","title":"static func %= (inout UIntHuge, UIntHuge)","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/_=(_:_:)-4ndpn","title":"static func ^= (inout UIntHuge, UIntHuge)","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/_=(_:_:)-6qla3","title":"static func >= <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/_=(_:_:)-6yih","title":"static func <= <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/__(_:_:)-1qxjz","title":"static func >> <RHS>(Self, RHS) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/__(_:_:)-7puot","title":"static func << <RHS>(Self, RHS) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/__=(_:_:)-52h2z","title":"static func <<= <Other>(inout Self, Other)","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/__=(_:_:)-5e3dj","title":"static func >>= <Other>(inout Self, Other)","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/~(_:)-59i3o","title":"static func ~ (UIntHuge) -> UIntHuge","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/init()-3dxxp","title":"init()","type":"init"},{"path":"\/documentation\/duckdb\/uinthuge\/init(_:)-6urgr","title":"init<T>(T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/description-7prc7","title":"var description: String","type":"property"},{"path":"\/documentation\/duckdb\/uinthuge\/trailingzerobitcount","title":"var trailingZeroBitCount: Int","type":"property"},{"path":"\/documentation\/duckdb\/uinthuge\/words-swift.property","title":"var words: UIntHuge.Words","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/advanced(by:)","title":"func advanced(by: Int) -> Self","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/distance(to:)","title":"func distance(to: Self) -> Int","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/ismultiple(of:)","title":"func isMultiple(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/quotientandremainder(dividingby:)","title":"func quotientAndRemainder(dividingBy: UIntHuge) -> (quotient: UIntHuge, remainder: UIntHuge)","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/signum()","title":"func signum() -> Self","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/issigned-6gm8h","title":"static var isSigned: Bool","type":"property"}],"path":"\/documentation\/duckdb\/uinthuge\/binaryinteger-implementations","title":"BinaryInteger Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/'...(_:)-2c2w","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/'...(_:)-8d259","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/_(_:_:)-58rxy","title":"static func < (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/_(_:_:)-6osfd","title":"static func < (UIntHuge, UIntHuge) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/_(_:_:)-70c93","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/_(_:_:)-99rz4","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/_=(_:_:)-3xmfm","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/_=(_:_:)-4lske","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/_=(_:_:)-55m0u","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/_=(_:_:)-87kkc","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/duckdb\/uinthuge\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/duckdb\/uinthuge\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/description-4kdhl","title":"var description: String","type":"property"}],"path":"\/documentation\/duckdb\/uinthuge\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/!=(_:_:)-8p0la","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/==(_:_:)-4kl5x","title":"static func == (UIntHuge, UIntHuge) -> Bool","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/==(_:_:)-7c89x","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/duckdb\/uinthuge\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/init(integerliteral:)","title":"init(integerLiteral: Int64)","type":"init"}],"path":"\/documentation\/duckdb\/uinthuge\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/&*(_:_:)","title":"static func &* (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/&*=(_:_:)","title":"static func &*= (inout Self, Self)","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/&+(_:_:)","title":"static func &+ (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/&+=(_:_:)","title":"static func &+= (inout Self, Self)","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/&-(_:_:)","title":"static func &- (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/&-=(_:_:)","title":"static func &-= (inout Self, Self)","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/&__(_:_:)-15ke4","title":"static func &>> <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/&__(_:_:)-274v4","title":"static func &<< <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/&__(_:_:)-3kop2","title":"static func &<< (UIntHuge, UIntHuge) -> UIntHuge","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/&__(_:_:)-48dle","title":"static func &>> (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/&__(_:_:)-6veno","title":"static func &>> (UIntHuge, UIntHuge) -> UIntHuge","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/&__(_:_:)-94vbw","title":"static func &<< (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/&__=(_:_:)-128wh","title":"static func &<<= <Other>(inout Self, Other)","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/&__=(_:_:)-29rop","title":"static func &<<= (inout UIntHuge, UIntHuge)","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/&__=(_:_:)-6lala","title":"static func &>>= (inout UIntHuge, UIntHuge)","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/&__=(_:_:)-c82x","title":"static func &>>= <Other>(inout Self, Other)","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/__(_:_:)-25orl","title":"static func << <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/__(_:_:)-6x3t8","title":"static func >> <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/~(_:)-2s20q","title":"static func ~ (Self) -> Self","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/init(_:)-3706u","title":"init?(String)","type":"init"},{"path":"\/documentation\/duckdb\/uinthuge\/init(_:)-4k4jf","title":"init<T>(T)","type":"init"},{"path":"\/documentation\/duckdb\/uinthuge\/init(_:radix:)","title":"init?<S>(S, radix: Int)","type":"init"},{"path":"\/documentation\/duckdb\/uinthuge\/init(bigendian:)","title":"init(bigEndian: Self)","type":"init"},{"path":"\/documentation\/duckdb\/uinthuge\/init(clamping:)","title":"init<Other>(clamping: Other)","type":"init"},{"path":"\/documentation\/duckdb\/uinthuge\/init(exactly:)-8os6","title":"init?<T>(exactly: T)","type":"init"},{"path":"\/documentation\/duckdb\/uinthuge\/init(littleendian:)","title":"init(littleEndian: Self)","type":"init"},{"path":"\/documentation\/duckdb\/uinthuge\/init(truncatingifneeded:)","title":"init<T>(truncatingIfNeeded: T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/bigendian","title":"var bigEndian: Self","type":"property"},{"path":"\/documentation\/duckdb\/uinthuge\/bitwidth-swift.property","title":"var bitWidth: Int","type":"property"},{"path":"\/documentation\/duckdb\/uinthuge\/byteswapped","title":"var byteSwapped: UIntHuge","type":"property"},{"path":"\/documentation\/duckdb\/uinthuge\/leadingzerobitcount","title":"var leadingZeroBitCount: Int","type":"property"},{"path":"\/documentation\/duckdb\/uinthuge\/littleendian","title":"var littleEndian: Self","type":"property"},{"path":"\/documentation\/duckdb\/uinthuge\/nonzerobitcount","title":"var nonzeroBitCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/addingreportingoverflow(_:)","title":"func addingReportingOverflow(UIntHuge) -> (partialValue: UIntHuge, overflow: Bool)","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/dividedreportingoverflow(by:)","title":"func dividedReportingOverflow(by: UIntHuge) -> (partialValue: UIntHuge, overflow: Bool)","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/dividingfullwidth(_:)","title":"func dividingFullWidth((high: UIntHuge, low: UIntHuge.Magnitude)) -> (quotient: UIntHuge, remainder: UIntHuge)","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/multipliedfullwidth(by:)","title":"func multipliedFullWidth(by: UIntHuge) -> (high: UIntHuge, low: UIntHuge.Magnitude)","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/multipliedreportingoverflow(by:)-93bp0","title":"func multipliedReportingOverflow(by: UIntHuge) -> (partialValue: UIntHuge, overflow: Bool)","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/remainderreportingoverflow(dividingby:)","title":"func remainderReportingOverflow(dividingBy: UIntHuge) -> (partialValue: UIntHuge, overflow: Bool)","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/subtractingreportingoverflow(_:)","title":"func subtractingReportingOverflow(UIntHuge) -> (partialValue: UIntHuge, overflow: Bool)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/bitwidth-swift.type.property","title":"static var bitWidth: Int","type":"property"},{"path":"\/documentation\/duckdb\/uinthuge\/max-2llc4","title":"static var max: UIntHuge","type":"property"},{"path":"\/documentation\/duckdb\/uinthuge\/min-41qxt","title":"static var min: UIntHuge","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/random(in:)-234jv","title":"static func random(in: ClosedRange<Self>) -> Self","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/random(in:)-3sr0x","title":"static func random(in: Range<Self>) -> Self","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/random(in:using:)-1kd8y","title":"static func random<T>(in: ClosedRange<Self>, using: inout T) -> Self","type":"method"},{"path":"\/documentation\/duckdb\/uinthuge\/random(in:using:)-ars","title":"static func random<T>(in: Range<Self>, using: inout T) -> Self","type":"method"}],"path":"\/documentation\/duckdb\/uinthuge\/fixedwidthinteger-implementations","title":"FixedWidthInteger Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/duckdb\/uinthuge\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/*(_:_:)","title":"static func * (UIntHuge, UIntHuge) -> UIntHuge","type":"op"},{"path":"\/documentation\/duckdb\/uinthuge\/*=(_:_:)","title":"static func *= (inout UIntHuge, UIntHuge)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/init(exactly:)-ldmy","title":"init?<T>(exactly: T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/magnitude-swift.property-32133","title":"var magnitude: UIntHuge.Magnitude","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/magnitude-swift.typealias","title":"UIntHuge.Magnitude","type":"typealias"}],"path":"\/documentation\/duckdb\/uinthuge\/numeric-implementations","title":"Numeric Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/init(_:)-5vyk9","title":"init<T>(T)","type":"init"},{"path":"\/documentation\/duckdb\/uinthuge\/init(exactly:)-v335","title":"init?<T>(exactly: T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/magnitude-swift.property-4sp7g","title":"var magnitude: Self","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/uinthuge\/issigned-7fh8i","title":"static var isSigned: Bool","type":"property"},{"path":"\/documentation\/duckdb\/uinthuge\/max-kew1","title":"static var max: Self","type":"property"},{"path":"\/documentation\/duckdb\/uinthuge\/min-1c435","title":"static var min: Self","type":"property"}],"path":"\/documentation\/duckdb\/uinthuge\/unsignedinteger-implementations","title":"UnsignedInteger Implementations","type":"symbol"}],"path":"\/documentation\/duckdb\/uinthuge","title":"UIntHuge","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/duckdb\/dbint","title":"DBInt","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/duckdb\/databaseerror\/appenderfailedtoappenditem(reason:)","title":"case appenderFailedToAppendItem(reason: String?)","type":"case"},{"path":"\/documentation\/duckdb\/databaseerror\/appenderfailedtoendrow(reason:)","title":"case appenderFailedToEndRow(reason: String?)","type":"case"},{"path":"\/documentation\/duckdb\/databaseerror\/appenderfailedtoflush(reason:)","title":"case appenderFailedToFlush(reason: String?)","type":"case"},{"path":"\/documentation\/duckdb\/databaseerror\/appenderfailedtoinitialize(reason:)","title":"case appenderFailedToInitialize(reason: String?)","type":"case"},{"path":"\/documentation\/duckdb\/databaseerror\/configurationfailedtosetflag","title":"case configurationFailedToSetFlag","type":"case"},{"path":"\/documentation\/duckdb\/databaseerror\/connectionfailedtoinitialize","title":"case connectionFailedToInitialize","type":"case"},{"path":"\/documentation\/duckdb\/databaseerror\/connectionqueryerror(reason:)","title":"case connectionQueryError(reason: String?)","type":"case"},{"path":"\/documentation\/duckdb\/databaseerror\/databasefailedtoinitialize(reason:)","title":"case databaseFailedToInitialize(reason: String?)","type":"case"},{"path":"\/documentation\/duckdb\/databaseerror\/decimalunrepresentable","title":"case decimalUnrepresentable","type":"case"},{"path":"\/documentation\/duckdb\/databaseerror\/preparedstatementfailedtobindparameter(reason:)","title":"case preparedStatementFailedToBindParameter(reason: String?)","type":"case"},{"path":"\/documentation\/duckdb\/databaseerror\/preparedstatementfailedtoinitialize(reason:)","title":"case preparedStatementFailedToInitialize(reason: String?)","type":"case"},{"path":"\/documentation\/duckdb\/databaseerror\/preparedstatementqueryerror(reason:)","title":"case preparedStatementQueryError(reason: String?)","type":"case"},{"path":"\/documentation\/duckdb\/databaseerror\/typemismatch(_:)","title":"case typeMismatch(Any.Type)","type":"case"},{"path":"\/documentation\/duckdb\/databaseerror\/valuenotfound(_:)","title":"case valueNotFound(Any.Type)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/duckdb\/databaseerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/duckdb\/databaseerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/duckdb\/databaseerror","title":"DatabaseError","type":"enum"}],"path":"\/documentation\/duckdb","title":"DuckDB","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}